/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.0                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default        steadyState;
}

gradSchemes
{
    default            cellMDLimited leastSquares 0.5; //cellMDLimited Gauss linear 0.5; //cellMDLimited leastSquares 1.0;//Gauss linear;//  leastSquares;// cellLimited leastSquares 1.0;// Gauss linear;

/*    grad(p)                 Gauss linear;
    grad(U)                 Gauss linear;
    grad(k)                 Gauss linear;
    grad(epsilon)           Gauss linear;
    grad(omega)             Gauss linear;
    grad(nuTilda)           Gauss linear;
    grad(magSqr(U))         Gauss linear;
    snGradCorr(U)           Gauss linear;
    snGradCorr(p)           Gauss linear;
    snGradCorr(k)           Gauss linear;
    snGradCorr(epsilon)     Gauss linear;
    snGradCorr(omega)       Gauss linear;
    snGradCorr(nuTilda)     Gauss linear;*/
}

divSchemes
{
    default                         none;
    div(phi,U)                      Gauss linearUpwind grad(U); //bounded Gauss QUICK;
    div(phi,k)                      bounded Gauss upwind;
    div(phi,epsilon)                bounded Gauss upwind;
    div(phi,omega)                  bounded Gauss 1.0;
    div(phi,nuTilda)                bounded Gauss 1.0;
    div((nuEff*dev(T(grad(U)))))    Gauss linear;
    div((nuEff*dev2(T(grad(U)))))   Gauss linear;
    div(phi,T)                      bounded Gauss limitedLinear 1;
}

laplacianSchemes
{
    default                         Gauss linear limited 0.333;
//    laplacian(1,p)                  Gauss linear corrected;
//    laplacian(nuEff,U)              Gauss linear limited 0.5;//corrected;
//    laplacian(DkEff,k)              Gauss linear limited 0.333;
//    laplacian(DepsilonEff,epsilon)  Gauss linear limited 0.333;
//    laplacian(DomegaEff,omega)      Gauss 1.0;
//    laplacian(DnuTildaEff,nuTilda)  Gauss 1.0;
//    laplacian((1|A(U)),p)           Gauss linear corrected;
//    laplacian(DT,T)                 Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    interpolate(U)  linear;
}

snGradSchemes
{
    default             corrected;
    snGrad(T)           limited 0.5;
    snGrad(k)           limited 0.5;
    snGrad(epsilon)     limited 0.5;
    snGrad(omega)       limited 0.5;
    snGrad(nuTilda)     limited 0.5;
}

fluxRequired
{
    default         no;
    p;
}

wallDist
{
    method    meshWave;
}

// ************************************************************************* //
